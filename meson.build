# The meson.build files are generated by:
# https://codeberg.org/Volker_Weissmann/foam_meson
# If you have questions/problems, contact volker.weissmann@gmx.de

project('OpenFOAM', 'c', 'cpp',
    version: run_command('etc' / 'meson_helpers' / 'get_version.sh', '.', check: true).stdout(),
    default_options : ['warning_level=0', 'b_lundef=false', 'b_asneeded=false'])

if meson.version().version_compare('<0.59.0')
    # We need commit 4ca9a16288f51cce99624a2ef595d879acdc02d8 ".C files are now treated as C++ code"
    error('Minimum meson version requred: 0.59.0')
endif

devenv = environment()
devenv.set('WM_PROJECT_DIR', meson.source_root())
meson.add_devenv(devenv)

fs = import('fs')
pkg = import('pkgconfig')

cppc = meson.get_compiler('cpp')

add_project_arguments('-DWM_LABEL_SIZE=' + get_option('WM_LABEL_SIZE'), language : ['c', 'cpp'])
add_project_arguments('-DWM_ARCH=' + get_option('WM_ARCH'), language : ['c', 'cpp'])
add_project_arguments('-DWM_' + get_option('WM_PRECISION_OPTION'), language : ['c', 'cpp'])
add_project_arguments('-DNoRepository', language : ['c', 'cpp'])
add_project_arguments('-DOPENFOAM=2006', language : ['c', 'cpp'])
add_project_arguments('-DOMPI_SKIP_MPICXX', language : ['c', 'cpp'])
add_project_arguments('-ftemplate-depth-100', language : ['c', 'cpp'])
add_project_arguments('-m64', language : ['c', 'cpp'])
add_project_link_arguments('-Wl,--add-needed', language : ['c', 'cpp'])
add_project_link_arguments('-Wl,--no-as-needed', language : ['c', 'cpp'])
if cppc.get_id() == 'gcc'
    add_project_arguments('-DWM_COMPILER="Gcc"', language : 'cpp')
elif cppc.get_id() == 'clang'
    add_project_arguments('-DWM_COMPILER="Clang"', language : 'cpp')
else
    error('Unknown Compiler. I do not know what to fill in here for the dots: -DWM_COMPILER="..."')
endif
if get_option('debug')
    add_project_arguments('-DWM_COMPILE_OPTION="Debug"', language : ['c', 'cpp'])
    add_project_arguments('-DFULLDEBUG', language : ['c', 'cpp'])
    add_project_arguments('-Wfatal-errors', language : ['c', 'cpp'])
    add_project_arguments('-fdefault-inline', language : ['c', 'cpp'])
    add_project_arguments('-finline-functions', language : ['c', 'cpp'])
else
    add_project_arguments('-DWM_COMPILE_OPTION="Opt"', language : ['c', 'cpp'])
    add_project_arguments('-frounding-math', language : ['c', 'cpp'])
endif

if not cppc.compiles(files('src/OSspecific/POSIX/signals/comptest.C'))
    error('"src/OSspecific/POSIX/signals/comptest.C" failed to compile. Thus, we refuse to compile OpenFOAM because "src/OSspecific/POSIX/signals/sigFpe.C" will fail to compile. Most likely, you are on a linux machine using a libc other than gnu libc. Currently, only gnu libc is supported on linux machines.')
endif

foamConfig_cpp = custom_target('foamConfig.cpp',
output : 'foamConfig.cpp',
input : 'src/OpenFOAM/global/foamConfig.Cver',
command : [meson.source_root() / 'etc' / 'meson_helpers' / 'set_versions_in_foamConfig_Cver.sh', meson.source_root(), '@OUTPUT@'])

m_dep = cppc.find_library('m')
dl_dep = cppc.find_library('dl')
z_dep = cppc.find_library('z')
fftw3_dep = cppc.find_library('fftw3')

mpfr_dep = cppc.find_library('mpfr', required: false, disabler: true)
gmp_dep = cppc.find_library('gmp', required: false, disabler: true)
metis_dep = cppc.find_library('metis', required: false, disabler: true)
readline_dep = cppc.find_library('readline', required: false, disabler: true)
perf_main_dep = cppc.find_library('perf_main', required: false, disabler: true)
gl_dep = cppc.find_library('GL', required: false, disabler: true)
cgal_dep = dependency('CGAL', required: false, disabler: true)
zoltan_dep = dependency('', required: false, disabler: true)
mgrid_dep = dependency('', required: false, disabler: true)
ccmio_dep = dependency('', required: false, disabler: true)
kahip_dep = dependency('', required: false, disabler: true)
scotch_dep = dependency('', required: false, disabler: true)
scotcherrexit_dep = dependency('', required: false, disabler: true)
ptscotch_dep = dependency('', required: false, disabler: true)
ptscotcherrexit_dep = dependency('', required: false, disabler: true)

thread_dep = dependency('threads')
boost_system_dep = dependency('boost', modules : ['system'])
# If I do mpi_dep = cppc.find_library('mpi') instead, and test it on a debian machine with the package mpi-default-dev installed, it fails to find <mpi.h>.
mpi_dep = dependency('mpi', language: 'cpp')

lemonbin = executable('lemon', 'wmake/src/lemon.c', native: true)

# Shamelessly stolen from https://github.com/mesonbuild/meson/blob/master/test%20cases/frameworks/8%20flex/meson.build
flex = find_program('flex')
flexgen = generator(flex,
output : '@PLAINNAME@.yy.cpp',
arguments : ['--c++', '--full', '-o', '@OUTPUT@', '@INPUT@'])

m4lemon = find_program('etc' / 'meson_helpers' / 'm4lemon.sh')

recursive_include_dirs = meson.build_root()
# lnInclude_hack ensures that `ls recursive_include_dirs/some/dir` would show symlinks to all files shown by `find meson.source_root()/some/dir -name "*.[CHh]"`
lnInclude_hack = custom_target(
    'lnInclude_hack',
    output: 'fake.h',
    command: [
        meson.source_root() / 'etc' / 'meson_helpers' / 'create_all_symlinks.py',
        meson.source_root(),
        recursive_include_dirs,
        ], build_always_stale: true)


subdir('src')
subdir('applications')
subdir('tutorials')
