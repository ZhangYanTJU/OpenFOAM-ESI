srcfiles = [
    lnInclude_hack,
    'probes/probes.C',
    'probes/patchProbes.C',
    'sampledSet/circle/circleSet.C',
    'sampledSet/cloud/cloudSet.C',
    'sampledSet/patchCloud/patchCloudSet.C',
    'sampledSet/polyLine/polyLineSet.C',
    'sampledSet/cellCentre/cellCentreSet.C',
    'sampledSet/face/faceOnlySet.C',
    'sampledSet/midPoint/midPointSet.C',
    'sampledSet/midPointAndFace/midPointAndFaceSet.C',
    'sampledSet/patchSeed/patchSeedSet.C',
    'sampledSet/patchEdge/patchEdgeSet.C',
    'sampledSet/sampledSet/sampledSet.C',
    'sampledSet/sampledSets/sampledSets.C',
    'sampledSet/triSurfaceMeshPointSet/triSurfaceMeshPointSet.C',
    'sampledSet/uniform/uniformSet.C',
    'sampledSet/array/arraySet.C',
    'sampledSet/shortestPath/shortestPathSet.C',
    'surface/cutting/cuttingPlane.C',
    'surface/cutting/cuttingPlaneCuts.C',
    'surface/cutting/cuttingPlaneSelection.C',
    'surface/cutting/cuttingSurface.C',
    'surface/cutting/cuttingSurfaceCuts.C',
    'surface/cutting/cuttingSurfaceBase.C',
    'surface/cutting/cuttingSurfaceBaseSelection.C',
    'surface/distanceSurface/distanceSurface.C',
    'surface/distanceSurface/distanceSurfaceFilter.C',
    'surface/isoSurface/isoSurfaceBase.C',
    'surface/isoSurface/isoSurfaceBaseNew.C',
    'surface/isoSurface/isoSurfaceParams.C',
    'surface/isoSurface/isoSurfaceCell.C',
    'surface/isoSurface/isoSurfacePoint.C',
    'surface/isoSurface/isoSurfaceTopo.C',
    'surface/thresholdCellFaces/thresholdCellFaces.C',
    'sampledSurface/sampledNone/sampledNone.C',
    'sampledSurface/sampledFaceZone/sampledFaceZone.C',
    'sampledSurface/sampledPatch/sampledPatch.C',
    'sampledSurface/sampledPatchInternalField/sampledPatchInternalField.C',
    'sampledSurface/sampledPlane/sampledPlane.C',
    'sampledSurface/isoSurface/sampledIsoSurface.C',
    'sampledSurface/isoSurface/sampledIsoSurfaceCell.C',
    'sampledSurface/isoSurface/sampledIsoSurfacePoint.C',
    'sampledSurface/isoSurface/sampledIsoSurfaceTopo.C',
    'sampledSurface/distanceSurface/sampledDistanceSurface.C',
    'sampledSurface/sampledCuttingPlane/sampledCuttingPlane.C',
    'sampledSurface/sampledCuttingSurface/sampledCuttingSurface.C',
    'sampledSurface/sampledMeshedSurface/sampledMeshedSurface.C',
    'sampledSurface/sampledMeshedSurface/sampledMeshedSurfaceNormal.C',
    'sampledSurface/sampledSurface/sampledSurface.C',
    'sampledSurface/sampledSurface/sampledSurfaceRegister.C',
    'sampledSurface/sampledSurfaces/sampledSurfaces.C',
    'sampledSurface/thresholdCellFaces/sampledThresholdCellFaces.C',
    'graphField/writePatchGraph.C',
    'graphField/writeCellGraph.C',
    'graphField/makeGraph.C',
    'meshToMesh/meshToMesh.C',
    'meshToMesh/meshToMeshParallelOps.C',
    'meshToMesh/calcMethod/meshToMeshMethod/meshToMeshMethod.C',
    'meshToMesh/calcMethod/meshToMeshMethod/meshToMeshMethodNew.C',
    'meshToMesh/calcMethod/cellVolumeWeight/cellVolumeWeightMethod.C',
    'meshToMesh/calcMethod/correctedCellVolumeWeight/correctedCellVolumeWeightMethod.C',
    'meshToMesh/calcMethod/direct/directMethod.C',
    'meshToMesh/calcMethod/mapNearest/mapNearestMethod.C',
    'meshToMesh0/meshToMesh0.C',
    'meshToMesh0/calculateMeshToMesh0Addressing.C',
    'meshToMesh0/calculateMeshToMesh0Weights.C',
    'functions/Function1/makeFunction1s.C',
]
link_with = [
    lib_finiteVolume,
    lib_fileFormats,
    lib_surfMesh,
    lib_meshTools,
    lib_lagrangian,
]
dependencies = []
cpp_args = [
    '-I' + meson.source_root() / 'src/sampling',
    '-I' + recursive_include_dirs / 'src/finiteVolume',
    '-I' + recursive_include_dirs / 'src/fileFormats',
    '-I' + recursive_include_dirs / 'src/surfMesh',
    '-I' + recursive_include_dirs / 'src/meshTools',
    '-I' + recursive_include_dirs / 'src/lagrangian/basic',
    '-I' + recursive_include_dirs / 'src/sampling',
    '-I' + recursive_include_dirs / 'src/OpenFOAM',
    '-I' + recursive_include_dirs / 'src/OSspecific/POSIX',
]
lib_sampling = library(
    'sampling',
    srcfiles,
    link_with: link_with,
    dependencies: dependencies,
    cpp_args: cpp_args,
    implicit_include_directories: false,
    install: true,
)
pkg.generate(lib_sampling)
