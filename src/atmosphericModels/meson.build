srcfiles = [
    lnInclude_hack,
    'turbulenceModels/atmosphericTurbulentTransportModels.C',
    'turbulenceModels/atmosphericTurbulentFluidThermoModels.C',
    'porosityModels/powerLawLopesdaCosta/powerLawLopesdaCosta.C',
    'derivedFvPatchFields/atmBoundaryLayer/atmBoundaryLayer.C',
    'derivedFvPatchFields/atmBoundaryLayerInletVelocity/atmBoundaryLayerInletVelocityFvPatchVectorField.C',
    'derivedFvPatchFields/atmBoundaryLayerInletK/atmBoundaryLayerInletKFvPatchScalarField.C',
    'derivedFvPatchFields/atmBoundaryLayerInletEpsilon/atmBoundaryLayerInletEpsilonFvPatchScalarField.C',
    'derivedFvPatchFields/atmBoundaryLayerInletOmega/atmBoundaryLayerInletOmegaFvPatchScalarField.C',
    'derivedFvPatchFields/atmTurbulentHeatFluxTemperature/atmTurbulentHeatFluxTemperatureFvPatchScalarField.C',
    'derivedFvPatchFields/wallFunctions/atmAlphatkWallFunction/atmAlphatkWallFunctionFvPatchScalarField.C',
    'derivedFvPatchFields/wallFunctions/atmEpsilonWallFunction/atmEpsilonWallFunctionFvPatchScalarField.C',
    'derivedFvPatchFields/wallFunctions/atmNutkWallFunction/atmNutkWallFunctionFvPatchScalarField.C',
    'derivedFvPatchFields/wallFunctions/atmNutUWallFunction/atmNutUWallFunctionFvPatchScalarField.C',
    'derivedFvPatchFields/wallFunctions/atmNutWallFunction/atmNutWallFunctionFvPatchScalarField.C',
    'derivedFvPatchFields/wallFunctions/atmOmegaWallFunction/atmOmegaWallFunctionFvPatchScalarField.C',
    'fvOptions/atmAmbientTurbSource/atmAmbientTurbSource.C',
    'fvOptions/atmBuoyancyTurbSource/atmBuoyancyTurbSource.C',
    'fvOptions/atmCoriolisUSource/atmCoriolisUSource.C',
    'fvOptions/atmLengthScaleTurbSource/atmLengthScaleTurbSource.C',
    'fvOptions/atmPlantCanopyTurbSource/atmPlantCanopyTurbSource.C',
    'fvOptions/atmPlantCanopyUSource/atmPlantCanopyUSource.C',
    'fvOptions/atmPlantCanopyTSource/atmPlantCanopyTSource.C',
    'fvOptions/atmNutSource/atmNutSource.C',
    'functionObjects/ObukhovLength/ObukhovLength.C',
]
link_with = [
    lib_finiteVolume,
    lib_fvOptions,
    lib_meshTools,
    lib_surfMesh,
    lib_fluidThermophysicalModels,
    lib_solidThermo,
    lib_turbulenceModels,
    lib_incompressibleTurbulenceModels,
    lib_compressibleTurbulenceModels,
]
dependencies = []
cpp_args = [
    '-I' + meson.source_root() / 'src/atmosphericModels',
    '-I' + recursive_include_dirs / 'src/finiteVolume',
    '-I' + recursive_include_dirs / 'src/meshTools',
    '-I' + recursive_include_dirs / 'src/surfMesh',
    '-I' + meson.source_root() / 'src/transportModels',
    '-I' + recursive_include_dirs / 'src/transportModels/compressible',
    '-I' + recursive_include_dirs / 'src/transportModels/incompressible',
    '-I' + recursive_include_dirs / 'src/thermophysicalModels/basic',
    '-I' + recursive_include_dirs / 'src/thermophysicalModels/specie',
    '-I' + recursive_include_dirs / 'src/thermophysicalModels/solidThermo',
    '-I' + recursive_include_dirs / 'src/TurbulenceModels/turbulenceModels',
    '-I' + recursive_include_dirs / 'src/TurbulenceModels/compressible',
    '-I' + recursive_include_dirs / 'src/TurbulenceModels/incompressible',
    '-I' + recursive_include_dirs / 'src/fvOptions',
    '-I' + recursive_include_dirs / 'src/atmosphericModels',
    '-I' + recursive_include_dirs / 'src/OpenFOAM',
    '-I' + recursive_include_dirs / 'src/OSspecific/POSIX',
]
lib_atmosphericModels = library(
    'atmosphericModels',
    srcfiles,
    link_with: link_with,
    dependencies: dependencies,
    cpp_args: cpp_args,
    implicit_include_directories: false,
    install: true,
)
pkg.generate(lib_atmosphericModels)
