%include
{
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | www.openfoam.com
     \\/     M anipulation  |
-------------------------------------------------------------------------------
    Copyright (C) 2019-2024 OpenCFD Ltd.
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Description
    Lemon grammar for field expressions.

    https://www.sqlite.org/src/doc/trunk/doc/lemon.html

    This code is leans heavily on the features included in the
    swak4Foam bison code by Bernhard Gschaider <bgschaid@hfd-research.com>
    but is a complete rewrite.

    The generated parser is localized in an anonymous namespace.
    Interface code wrapping is near the bottom of the file.

    Field naming conventions:
        'l' (Logical), 's' (Scalar), 'v' (Vector),
        'h' (spHerical), 'y' (sYmmetrical), 't' (Tensor)
    Prefixes
        '' (volume), 's' (surface), 'p' (point)

    Thus "tfield" is a volTensorField, "psfield" is a pointScalarField.

Notes
    The grammar productions rules are indeed long-winded. There are standard
    field types (scalar, vector, tensor, ...), an additional logical field
    type (stored internally as a scalar).
    For patches there will be face/point versions of each.
    For volume fields, there will be volume/surface/point versions of each.

    The grammar is thus wrapped with m4(1) macros. Some caution may be
    required with m4-specific words such as `format' etc and careful
    attention must be paid to quoting when defining the macros.

    The "declare_field" macro emits the parse token type for Lemon and
    defines various accessor macros:
       _new_NNfield, _get_NNfield, _value_type_NNfield

    In some cases, for example where the support for point fields (eg,
    pointScalarField) is incomplete or not yet defined, operations are
    restricted to the internal fields. For this, two macros will be defined:
    "field_read_access" and "field_write_access". The default versions of
    these should be defined to pass through their arguments, with workaround
    versions adding primitiveField(), primitiveFieldRef() methods to wrap the
    access.

    To further allow for intervention, the macros are structured to permit
    overrides of the individual components prior to invoking. These means that
    the most general rules appear first with the component implementation
    delayed until later.

TBD
    Modulo:
      - currently uses the standard definition, not the swak definition

    Hodge dual:
    Double inner-product:
      - Ignored for the moment.

    Outer-product:
      - Common mistake to use '*' when meaning '&' for the inner-product.
        Perhaps ignore or offer some other syntax such
          "a [inner] b"
          "a [outer] b"
          "a [cross] b"

\*---------------------------------------------------------------------------*/
} // %include

/*
 * include fieldExprLemonParserMacros.m4
 *include(`fieldExprLemonParserMacros.m4')dnl
 !done in a comment since many editors have issues matching m4 quotes!
 */
%include
{
#include "exprScanToken.H"
#include "fieldExprDriver.H"
#include "fieldExprParser.H"
#include "fieldExprScanner.H"
#include "unitConversion.H"
#include "error.H"
#include "IOmanip.H"
#include "exprOps.H"
#include "exprDriverOps.H"

// Enable ParseTrace
#undef NDEBUG

compiler_pragmas()

// Local Functions

tmp_management()

} // %include

// ------------------------------------------------------------------------- //

// File-scope visibility for exposed Lemon parser routines
%static

// Use extra argument for the return value
%extra_context  { Foam::expressions::fieldExpr::parseDriver* driver }
%parse_failure  { driver->reportFatal("Parse failure, giving up..."); }
%syntax_error   { driver->reportFatal("Syntax error"); }

%token_prefix TOK_

// Terminals
%token_type         {Foam::expressions::scanToken}
%token_destructor   { ($$).destroy(); }

// Fields
declare_field(lfield, Foam::boolField, bool, newField, getField)
declare_field(sfield, Foam::scalarField, Foam::scalar, newField, getField)
declare_field(vfield, Foam::vectorField, Foam::vector, newField, getField)
declare_field(hfield, Foam::sphericalTensorField, Foam::sphericalTensor, newField, getField)
declare_field(yfield, Foam::symmTensorField, Foam::symmTensor, newField, getField)
declare_field(tfield, Foam::tensorField, Foam::tensor, newField, getField)


// For each rule action with code, destruction must be done by that code block
// Lemon does not generate a destructor for that.
// So do not use Lemon destructors for anything.

standard_tokens()
operator_precedence()

%start_symbol evaluate

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

/*---------------------------------------------------------------------------*\
 * Productions (scalar)
\*---------------------------------------------------------------------------*/

%type svalue { Foam::scalar }

svalue (lhs) ::= NUMBER (tok) .     { lhs = (tok).scalarValue; } // scanToken

svalue (lhs) ::= ZERO .             { lhs = Foam::zero{}; }
svalue (lhs) ::= PI LPAREN RPAREN . { lhs = Foam::constant::mathematical::pi; }
svalue (lhs) ::= DEG_TO_RAD LPAREN RPAREN . { lhs = Foam::degToRad(); }
svalue (lhs) ::= RAD_TO_DEG LPAREN RPAREN . { lhs = Foam::radToDeg(); }
svalue (lhs) ::= ARG LPAREN RPAREN . { lhs = driver->argValue(); }
svalue (lhs) ::= TIME LPAREN RPAREN . { lhs = driver->timeValue(); }
svalue (lhs) ::= DELTA_T LPAREN RPAREN . { lhs = driver->deltaT(); }

svalue (lhs) ::= SCALAR_FUNCTION_ID (name) LPAREN RPAREN .
{
    lhs = driver->getFunctionValue<Foam::scalar>
    (
        make_obj(name.name_),
        driver->timeValue()
    );
}


/*---------------------------------------------------------------------------*\
 * Productions (vector)
\*---------------------------------------------------------------------------*/

%type vvalue { Foam::vector* }
%destructor vvalue { delete($$); $$ = nullptr; }

vvalue (lhs) ::= VECTOR_VALUE (tok) .
{
    // Take ownership of pointer from scan token
    lhs = tok.vectorPtr; tok.vectorPtr = nullptr;
}

vvalue (lhs) ::= VECTOR_FUNCTION_ID (name) LPAREN RPAREN .
{
    auto val = driver->getFunctionValue<Foam::vector>
    (
        make_obj(name.name_),
        driver->timeValue()
    );
    lhs = new Foam::vector(val);
}


/* * * * * * * * * * * * * * * * * * Fields  * * * * * * * * * * * * * * * * *\
dnl
define([_logic_],       [lfield])dnl
define([_scalar_],      [sfield])dnl
define([_vector_],      [vfield])dnl
define([_sphTensor_],   [hfield])dnl
define([_symTensor_],   [yfield])dnl
define([_tensor_],      [tfield])dnl
dnl
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/*---------------------------------------------------------------------------*\
 * Productions (scalarField)
dnl
define([_scalar_arg_],  [sfield])dnl
define([_target_],      [sfield])dnl
define([_new_target_],  [_new_sfield])dnl
define([_value_type_],  [Foam::scalar])dnl
dnl
\*---------------------------------------------------------------------------*/

evaluate ::= _target_ (a) . { driver->setResult(a); }

rule_field_from_value(_target_, svalue)
rule_get_field(_target_, SCALAR_ID)

rules_standard(_target_, _value_type_, _logic_)
rules_inplace_gUnary(_target_)
rules_scalar_operations()
rules_scalar_functions()

// Non-standard but manage via FieldOps::assign
rule_unary_assign(_target_, _target_, FLOOR, Foam::floorOp<_value_type_>())
rule_unary_assign(_target_, _target_, CEIL, Foam::ceilOp<_value_type_>())
rule_unary_assign(_target_, _target_, ROUND, Foam::roundOp<_value_type_>())

// Non-standard but works directly for scalarField
rule_binary_func(_target_, _target_, _target_, HYPOT, Foam::hypot)


// Other functions

_target_ (lhs) ::= RAND LPAREN RPAREN.
{
    lhs = driver->field_rand().ptr();
}

_target_ (lhs) ::= RAND LPAREN NUMBER (seed) RPAREN.
{
    lhs = driver->field_rand(std::round((seed).scalarValue)).ptr();
}

_target_ (lhs) ::= SCALAR_FUNCTION_ID (name) LPAREN _scalar_arg_ (values) RPAREN.
{
    lhs = _new_target_;
    driver->fillFunctionValues<_value_type_>
    (
        *lhs,
        make_obj(name.name_),
        make_obj(values)
    );
}


/*---------------------------------------------------------------------------*\
 * Productions (vectorField)
dnl
define([_scalar_arg_],  [sfield])dnl
define([_target_],      [vfield])dnl
define([_new_target_],  [_new_vfield])dnl
define([_value_type_],  [Foam::vector])dnl
dnl
\*---------------------------------------------------------------------------*/

evaluate ::= _target_ (a) . { driver->setResult(a); }

rule_field_from_value(_target_, vvalue)
rule_get_field(_target_, VECTOR_ID)

rules_standard(_target_, _value_type_, _logic_)
rules_inplace_gUnary(_target_)
rules_vector_operations()
rules_vector_functions()

// Other functions

_target_ (lhs) ::= VECTOR_FUNCTION_ID (name) LPAREN _scalar_arg_ (values) RPAREN.
{
    lhs = _new_target_;
    driver->fillFunctionValues<_value_type_>
    (
        *lhs,
        make_obj(name.name_),
        make_obj(values)
    );
}


/*---------------------------------------------------------------------------*\
 * Productions (sphericalTensorField)
dnl
define([_scalar_arg_],  [sfield])dnl
define([_target_],      [hfield])dnl
define([_new_target_],  [_new_hfield])dnl
define([_value_type_],  [Foam::sphericalTensor])dnl
dnl
\*---------------------------------------------------------------------------*/

evaluate ::= _target_ (a) . { driver->setResult(a); }

rule_get_field(_target_, SPH_TENSOR_ID)

rules_standard(_target_, _value_type_, _logic_)
rules_inplace_gUnary(_target_)
rules_sphTensor_operations()
rules_sphTensor_functions()


/*---------------------------------------------------------------------------*\
 * Productions (symmTensorField)
dnl
define([_scalar_arg_],  [sfield])dnl
define([_target_],      [yfield])dnl
define([_new_target_],  [_new_yfield])dnl
define([_value_type_],  [Foam::symmTensor])dnl
dnl
\*---------------------------------------------------------------------------*/

evaluate ::= _target_ (a) . { driver->setResult(a); }

rule_get_field(_target_, SYM_TENSOR_ID)

rules_standard(_target_, _value_type_, _logic_)
rules_inplace_gUnary(_target_)
rules_symTensor_operations()
rules_symTensor_functions()


/*---------------------------------------------------------------------------*\
 * Productions (tensorField)
dnl
define([_scalar_arg_],  [sfield])dnl
define([_target_],      [tfield])dnl
define([_new_target_],  [_new_tfield])dnl
define([_value_type_],  [Foam::tensor])dnl
dnl
\*---------------------------------------------------------------------------*/

evaluate ::= _target_ (a) . { driver->setResult(a); }
tfield (lhs) ::= IDENTITY_TENSOR . { lhs = _new_tfield(Foam::tensor::I); }

rule_get_field(_target_, TENSOR_ID)

rules_standard(_target_, _value_type_, _logic_)
rules_inplace_gUnary(_target_)
rules_tensor_operations()
rules_tensor_functions()


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

/*---------------------------------------------------------------------------*\
 * Logic field productions (boolField)
dnl
define([_target_],      [lfield])dnl
define([_new_target_],  [_new_lfield])dnl
define([_value_type_],  [bool])dnl
dnl
\*---------------------------------------------------------------------------*/

evaluate ::= _target_ (a) . { driver->setResult(a); }
_logic_ (lhs) ::= LTRUE .   { lhs = _new_lfield(_logic_true_); }
_logic_ (lhs) ::= LFALSE .  { lhs = _new_lfield(_logic_false_); }

rule_cast_logical(_target_, _target_)
rule_cast_logical(_target_, _scalar_, Foam::scalar)

dnl/* Handling of named logic fields not really tested (disable in scanner) */
rule_get_field(_target_, BOOL_ID)
rules_logical_operations(_logic_, _value_type_)


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

/*---------------------------------------------------------------------------*\
 * Field composition
\*---------------------------------------------------------------------------*/

rule_mag_logical(sfield, lfield)
rules_mag_functions(sfield, sfield)
rules_mag_functions(sfield, vfield)
rules_mag_functions(sfield, tfield)
rules_mag_functions(sfield, yfield)
rules_mag_functions(sfield, hfield)

rule_vector_zip(vfield, sfield, VECTOR)
rule_tensor_zip(tfield, sfield, TENSOR)
rule_symTensor_zip(yfield, sfield, SYM_TENSOR)
rule_sphTensor_zip(hfield, sfield, SPH_TENSOR)

rule_vector_components(sfield, vfield)
rule_tensor_components(sfield, tfield)
rule_symTensor_components(sfield, yfield)
rule_sphTensor_components(sfield, hfield)

rule_tensor_transpose(tfield)
rule_symTensor_transpose(yfield)
rule_sphTensor_transpose(hfield)

rule_tensor_unzipDiag(vfield, yfield)
rule_tensor_unzipAll(vfield, tfield)


// ************************************************************************* //

/*
 * include m4/lemon/parser-methods.m4
include([m4/lemon/parser-methods.m4])dnl
dnl Can revert to standard m4 quoting
dnl ... Or not changequote([`],['])dnl Revert to standard m4 quoting
 */

%code
{

// * * * * * * * * * * * * * Static Member Functions * * * * * * * * * * * * //

parser_code_static_methods(Foam::expressions::fieldExpr::parser)


// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //

void Foam::expressions::fieldExpr::parser::stop()
{
    if (lemon_)
    {
        ParseFree(lemon_, ::operator delete);
        #ifndef NDEBUG
        ParseTrace(nullptr, nullptr);
        #endif
        lemon_ = nullptr;
    }
}


void Foam::expressions::fieldExpr::parser::start(parseDriver& driver_)
{
    this->stop();
    lemon_ = ParseAlloc(::operator new, &driver_);

    if ((debug & 0x4) || driver_.debugParser())
    {
        #ifndef NDEBUG
        ParseTrace(stderr, const_cast<char*>(prompt_));
        #endif
    }
}


void Foam::expressions::fieldExpr::parser::parse(int tokenId)
{
    Parse(lemon_, tokenId, scanToken::null());
}


void Foam::expressions::fieldExpr::parser::parse(int tokenId, scanToken tok)
{
    Parse(lemon_, tokenId, tok);
}


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

}  // End of %code

// ************************************************************************* //
