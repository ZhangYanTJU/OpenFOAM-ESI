srcfiles = [
    lnInclude_hack,
    'phaseModel/phaseModel/phaseModel.C',
    'phaseModel/phaseModel/phaseModels.C',
    'phasePair/phasePair.C',
    'phasePair/phasePairKey.C',
    'phasePair/orderedPhasePair.C',
    'multiphaseInterSystem/multiphaseInterSystem.C',
    'multiphaseSystem/multiphaseSystem.C',
    'multiphaseSystem/multiphaseSystemNew.C',
    'multiphaseSystem/multiphaseSystems.C',
    'interfaceCompositionModel/interfaceCompositionModel.C',
    'InterfaceCompositionModel/InterfaceCompositionModels.C',
    'interfaceModels/porousModels/porousModel/porousModel.C',
    'interfaceModels/porousModels/VollerPrakash/VollerPrakash.C',
    'interfaceModels/surfaceTensionModels/surfaceTensionModel/surfaceTensionModel.C',
    'interfaceModels/surfaceTensionModels/constantSurfaceTensionCoefficient/constantSurfaceTensionCoefficient.C',
    'derivedFvPatchFields/timeVaryingMassSorption/timeVaryingMassSorptionFvPatchScalarField.C',
]
link_with = [
    lib_finiteVolume,
    lib_meshTools,
    lib_fluidThermophysicalModels,
    lib_reactionThermophysicalModels,
    lib_solidThermo,
    lib_compressibleTransportModels,
    lib_incompressibleTransportModels,
    lib_geometricVoF,
    lib_twoPhaseMixture,
    lib_twoPhaseProperties,
    lib_turbulenceModels,
    lib_compressibleTurbulenceModels,
    lib_thermophysicalProperties,
    lib_combustionModels,
    lib_saturationModel,
]
dependencies = []
cpp_args = [
    '-I' + meson.source_root() / 'src/phaseSystemModels/multiphaseInter/phasesSystem',
    '-I' + recursive_include_dirs / 'src/phaseSystemModels/reactingEuler/saturationModels',
    '-I' + recursive_include_dirs / 'src/finiteVolume',
    '-I' + recursive_include_dirs / 'src/meshTools',
    '-I' + recursive_include_dirs / 'src/thermophysicalModels/basic',
    '-I' + recursive_include_dirs / 'src/thermophysicalModels/specie',
    '-I' + recursive_include_dirs / 'src/thermophysicalModels/reactionThermo',
    '-I' + recursive_include_dirs / 'src/thermophysicalModels/solidThermo',
    '-I' + recursive_include_dirs / 'src/thermophysicalModels/solidSpecie',
    '-I' + recursive_include_dirs / 'src/thermophysicalModels/thermophysicalProperties',
    '-I' + meson.source_root() / 'src/transportModels',
    '-I' + recursive_include_dirs / 'src/transportModels/compressible',
    '-I' + recursive_include_dirs / 'src/transportModels/incompressible',
    '-I' + recursive_include_dirs / 'src/transportModels/geometricVoF',
    '-I' + recursive_include_dirs / 'src/TurbulenceModels/turbulenceModels',
    '-I' + recursive_include_dirs / 'src/TurbulenceModels/compressible',
    '-I' + recursive_include_dirs / 'src/TurbulenceModels/phaseCompressible',
    '-I' + recursive_include_dirs / 'src/combustionModels',
    '-I' + recursive_include_dirs / 'src/phaseSystemModels/multiphaseInter/phasesSystem',
    '-I' + recursive_include_dirs / 'src/OpenFOAM',
    '-I' + recursive_include_dirs / 'src/OSspecific/POSIX',
]
lib_incompressibleMultiphaseSystems = library(
    'incompressibleMultiphaseSystems',
    srcfiles,
    link_with: link_with,
    dependencies: dependencies,
    cpp_args: cpp_args,
    implicit_include_directories: false,
    install: true,
)
pkg.generate(lib_incompressibleMultiphaseSystems)
