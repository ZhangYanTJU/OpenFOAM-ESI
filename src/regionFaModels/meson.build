srcfiles = [
    lnInclude_hack,
    'regionFaModel/regionFaModel.C',
    'thermalShellModel/thermalShellModel.C',
    'thermalShellModel/thermalShellModelNew.C',
    'vibrationShellModel/vibrationShellModel.C',
    'vibrationShellModel/vibrationShellModelNew.C',
    'thermalShell/thermalShell.C',
    'KirchhoffShell/KirchhoffShell.C',
    'derivedFvPatchFields/thermalShell/thermalShellFvPatchScalarField.C',
    'derivedFvPatchFields/vibrationShell/vibrationShellFvPatchScalarField.C',
    'liquidFilm/subModels/kinematic/filmTurbulenceModel/filmTurbulenceModel/filmTurbulenceModel.C',
    'liquidFilm/subModels/kinematic/filmTurbulenceModel/filmTurbulenceModel/filmTurbulenceModelNew.C',
    'liquidFilm/subModels/kinematic/filmTurbulenceModel/laminar/laminar.C',
    'liquidFilm/subModels/kinematic/injectionModel/injectionModelList/injectionModelList.C',
    'liquidFilm/subModels/kinematic/injectionModel/injectionModel/injectionModel.C',
    'liquidFilm/subModels/kinematic/injectionModel/injectionModel/injectionModelNew.C',
    'liquidFilm/subModels/kinematic/injectionModel/curvatureSeparation/curvatureSeparation.C',
    'liquidFilm/subModels/kinematic/injectionModel/BrunDrippingInjection/BrunDrippingInjection.C',
    'liquidFilm/subModels/kinematic/force/forceList/forceList.C',
    'liquidFilm/subModels/kinematic/force/force/force.C',
    'liquidFilm/subModels/kinematic/force/force/forceNew.C',
    'liquidFilm/subModels/kinematic/force/contactAngleForces/contactAngleForce/contactAngleForce.C',
    'liquidFilm/subModels/kinematic/force/contactAngleForces/dynamicContactAngleForce/dynamicContactAngleForce.C',
    'liquidFilm/subModels/filmSubModelBase.C',
    'liquidFilm/liquidFilmBase.C',
    'liquidFilm/liquidFilmBaseNew.C',
    'liquidFilm/liquidFilmModel/liquidFilmModel.C',
    'liquidFilm/kinematicThinFilm/kinematicThinFilm.C',
    'derivedFvPatchFields/filmShell/velocityFilmShellFvPatchVectorField.C',
    'functionObjects/setTimeStep/setTimeStepFaRegionsFunctionObject.C',
]
link_with = [
    lib_finiteVolume,
    lib_finiteArea,
    lib_meshTools,
    lib_fluidThermophysicalModels,
    lib_incompressibleTransportModels,
    lib_compressibleTransportModels,
    lib_turbulenceModels,
    lib_incompressibleTurbulenceModels,
    lib_compressibleTurbulenceModels,
    lib_thermophysicalProperties,
    lib_specie,
    lib_faOptions,
    lib_distributionModels,
]
dependencies = []
cpp_args = [
    '-I' + meson.source_root() / 'src/regionFaModels',
    '-I' + recursive_include_dirs / 'src/faOptions',
    '-I' + recursive_include_dirs / 'src/finiteVolume',
    '-I' + recursive_include_dirs / 'src/finiteArea',
    '-I' + recursive_include_dirs / 'src/meshTools',
    '-I' + recursive_include_dirs / 'src/thermophysicalModels/thermophysicalProperties',
    '-I' + recursive_include_dirs / 'src/thermophysicalModels/specie',
    '-I' + recursive_include_dirs / 'src/lagrangian/distributionModels',
    '-I' + recursive_include_dirs / 'src/TurbulenceModels/compressible',
    '-I' + recursive_include_dirs / 'src/TurbulenceModels/turbulenceModels',
    '-I' + recursive_include_dirs / 'src/TurbulenceModels/incompressible',
    '-I' + recursive_include_dirs / 'src/thermophysicalModels/basic',
    '-I' + recursive_include_dirs / 'src/transportModels/compressible',
    '-I' + meson.source_root() / 'src/transportModels',
    '-I' + recursive_include_dirs / 'src/regionFaModels',
    '-I' + recursive_include_dirs / 'src/OpenFOAM',
    '-I' + recursive_include_dirs / 'src/OSspecific/POSIX',
]
lib_regionFaModels = library(
    'regionFaModels',
    srcfiles,
    link_with: link_with,
    dependencies: dependencies,
    cpp_args: cpp_args,
    implicit_include_directories: false,
    install: true,
)
pkg.generate(lib_regionFaModels)
