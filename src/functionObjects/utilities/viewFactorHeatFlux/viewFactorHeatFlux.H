/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | www.openfoam.com
     \\/     M anipulation  |
-------------------------------------------------------------------------------
    Copyright (C) 2024 OpenCFD Ltd.
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::functionObjects::viewFactorHeatFlux

Description
    Determines radiation heat flux between patches when using the viewFactor
    radiation model.

Usage
    Minimal example by using \c system/controlDict.functions:
    \verbatim
    viewFactorHeatFlux1
    {
        // Mandatory entries (unmodifiable)
        type        viewFactorHeatFlux;
        libs        (utilityFunctionObjects);

        // Optional entries (runtime modifiable)
        qr          qr;
    }
    \endverbatim

    where the entries mean:
    \table
      Property     | Description                        | Type | Req'd | Dflt
      type         | Type name: viewFactorHeatFlux      | word |  yes  | -
      libs         | Library name: fieldFunctionObjects | word |  yes  | -
      qr           | Name of radiation heat flux field  | word |  no   | qr
    \endtable

See also
- Foam::radiation::viewFactor

SourceFiles
    fvMeshFunctionObject.C

\*---------------------------------------------------------------------------*/

#ifndef Foam_functionObjects_viewFactorHeatFlux
#define Foam_functionObjects_viewFactorHeatFlux

#include "fvMeshFunctionObject.H"
#include "writeFile.H"
#include "IOmapDistribute.H"
#include "labelListIOList.H"
#include "scalarListIOList.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

namespace functionObjects
{

/*---------------------------------------------------------------------------*\
                     Class viewFactorHeatFlux Declaration
\*---------------------------------------------------------------------------*/

class viewFactorHeatFlux
:
    public fvMeshFunctionObject,
    public writeFile
{
    // Private Data

        // Name of radiation heat flux field; default = qr
        word qrName_;


        // Fields generated by viewFactorsGen utility

        //- Map
        autoPtr<IOmapDistribute> mapDistPtr_;

        //- Face addressing
        labelListIOList faceFaces_;

        //- View factors
        scalarListIOList Fij_;

        //- Patch indicies in compact addressing
        scalarList compactPatchID_;


    // Private Member Functions

        //- Initialise
        void initialise();


public:

    //- Runtime type information
    TypeName("viewFactorHeatFlux");


    // Constructors

        //- Construct from Time and dictionary
        viewFactorHeatFlux
        (
            const word& name,
            const Time& runTime,
            const dictionary& dict,
            const bool readFields = true
        );

        //- Construct from objectRegistry and dictionary
        viewFactorHeatFlux
        (
            const word& name,
            const objectRegistry& obr,
            const dictionary& dict,
            const bool readFields = true
        );

        //- No copy construct
        viewFactorHeatFlux(const viewFactorHeatFlux&) = delete;

        //- No copy assignment
        void operator=(const viewFactorHeatFlux&) = delete;


    //- Destructor
    virtual ~viewFactorHeatFlux() = default;


    // Member Functions

        //- Read the viewFactorHeatFlux data
        virtual bool read(const dictionary&);

        //- No-op - all operations performed during the call to write()
        virtual bool execute();

        //- Write the viewFactorHeatFlux per patch
        virtual bool write();

        //- Update for changes of mesh
        virtual void updateMesh(const mapPolyMesh&);

        //- Update for mesh point-motion
        virtual void movePoints(const polyMesh&);
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace functionObjects
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
