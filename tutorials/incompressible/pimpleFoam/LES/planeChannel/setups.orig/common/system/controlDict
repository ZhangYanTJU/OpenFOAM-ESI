/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pisoFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         10; // 180;

deltaT          2e-3;

writeControl    timeStep;

writeInterval   1000;

purgeWrite      3;

writeFormat     binary;

writePrecision  8;

writeCompression off;

timeFormat      general;

timePrecision   8;

runTimeModifiable false;

adjustTimeStep  false;

// Allow one-third of time for initialisation before sampling
timeStart    #eval #{ 1.0/3.0 * ${/endTime} #};

functions
{
    wallShearStress
    {
        type                wallShearStress;
        libs                (fieldFunctionObjects);
        patches             ( bottom top );
        writePrecision      10;
        writeToFile         yes;
        log                 yes;
        executeControl      timeStep;
        executeInterval     1;
        writeControl        writeTime;
        timeStart           $/timeStart;
    }

    Cf
    {
        type                coded;
        libs                (utilityFunctionObjects);
        name                Cf;
        writeControl        writeTime;

        codeExecute
        #{
            static autoPtr<volScalarField> Cf;
            if
            (
                mesh().time().timeIndex() == 1
                ||
                mesh().time().startTimeIndex() == mesh().time().timeIndex() - 1
            )
            {
                Info<< "Create skin-friction coefficient field" << nl;
                Cf.set
                (
                    new volScalarField
                    (
                        IOobject
                        (
                            "Cf",
                            mesh().time().timeName(),
                            mesh(),
                            IOobject::NO_READ,
                            IOobject::AUTO_WRITE
                        ),
                        mesh(),
                        dimless
                    )
                );
            }

            if
            (
                mesh().time().timeIndex() != 1
             && mesh().time().timeIndex() > 3 // 60 // = timeStart
            )
            {
                Info<< "Computing skin-friction coefficient field" << endl;

                const auto& tau =
                    mesh().lookupObject<volVectorField>("wallShearStress");
                auto& Cf = mesh().lookupObjectRef<volScalarField>("Cf");

                const dimensionedScalar Ubulk(dimVelocity, 17.55);

                Cf = mag(tau.component(0))/(0.5*sqr(Ubulk));
            }
        #};
    }

    fieldAverage1
    {
        type                fieldAverage;
        libs                (fieldFunctionObjects);
        timeStart           $/timeStart;
        writeControl        writeTime;

        fields
        (
            U
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

            p
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

            wallShearStress
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }

            Cf
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }
        );
    }
}


// ************************************************************************* //
