/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2206                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale       1;

// * * * * coordinate positions
// x-coordinate of inlet patch
xInlet      -2.14;

// x-coordinates for end of x-Zone 1 (i.e. upstream of hump)
x1Top       -0.5712197653;
x1Bottom    0;

// x-coordinates for end of x-Zone 2 (i.e. downstream of hump)
x2Top       1.657187218;
x2Bottom    1;

// x-coordinate of outlet patch
xOutlet     4;

// min/max y-coordinate of tunnel
yMin        0;
yMax        0.90905;

// min/max z-coordinate of tunnel
zMin        0;
zMax        0.4;

// * * * * grid parameter
// x-spacing at inlet
dxInlet     0.1;

// cell-to-cell growth ratio from inlet to hump (x-Zone 1)
rxInlet     1.2;

// x-spacing in focus region (i.e. hump region)
dxFocus     0.005;

// x-spacing at outlet
dxOutlet    0.05;

// cell-to-cell growth ratio from focus region to outlet (x-Zone 3)
rxOutlet     1.2;

// y-spacing of 1st near-wall cell at bottom wall
dyWall      1.5e-05;

// cell-to-cell growth ratio near the wall (y-Zone 1)
ryBL        1.15;

// vertical length of y-Zone 1
LyBL        0.05;

// y-spacing in focus region (y-Zone 2)
dyFocus     0.005;        

// vertical length of y-Zone 2
LyFocus     0.11;

// y-spacing in channel core (y-Zone 3)
dyMid       0.025;

// cell-to-cell growth from focus region to channel core (y-Zone 3)
ryMid       1.2;

// vertical length of y-Zone 3
LyMid       0.34;

// cell-to-cell growth from channel core to top wall (y-Zone 4)
ryTop       1.2;

// y-spacing of 1st near-wall cell at top wall
dyTop       0.005;

// uniform z-spacing (spanwise direction)
dz          0.01;

// * * * * meshing / x-direction

// x-Zone 1 with grading
NxCorrZ1    #codeStream
{
    code
    #{
        scalar tol        = 1.0e-10;
        scalar residual   = 1.0e+10;
        scalar expRcorr   = $rxInlet;
        scalar totExpR    = $dxInlet/$dxFocus;
        scalar Nx         = Foam::log(totExpR)/Foam::log(expRcorr);
        scalar deltaStart = $dxFocus;
        scalar lEdge      = $x1Bottom - $xInlet;
        int iter          = 0;
        int iterMax       = 100;

        while ((residual > tol) && (iter < iterMax))
        {
            scalar coeff  = pow(totExpR, 1./(Nx-1.));
            scalar coeffN = pow(totExpR, Nx/(Nx-1.));

            scalar f      = (deltaStart*((1.-coeffN) / ((1.-coeff)))) - lEdge;
            scalar fPrime = deltaStart * Foam::log(totExpR) * (1./sqr(Nx-1.)) * ((1.-coeff)*coeffN - (1.-coeffN)*coeff)/ sqr(1.-coeff);
            Nx            = Nx - (f/fPrime);

            residual      = mag((deltaStart*((1.-coeffN) / ((1.-coeff)))) - lEdge);
            iter++;
        }
        os  << Nx << endl;
    #};
};
totExpZ1x    #calc "$dxFocus/$dxInlet";
NxZ1         #calc "static_cast<int>( $NxCorrZ1 )";
totExpZ1xTop #calc "($x2Top - $x1Top)/($NxZ1*$dxInlet)";

// x-Zone 2 with uniform spacing
NxFocus     #calc "static_cast<int>( ($x2Bottom-$x1Bottom)/$dxFocus )";

// x-Zone 3 with grading
NxCorrZ3    #codeStream
{
    code
    #{
        scalar tol        = 1.0e-10;
        scalar residual   = 1.0e+10;
        scalar expRcorr   = $rxOutlet;
        scalar totExpR    = $dxOutlet/(1.05377349658562*$dxFocus);
        scalar Nx         = Foam::log(totExpR)/Foam::log(expRcorr);
        scalar deltaStart = $dxFocus;
        scalar lEdge      = $xOutlet - $x2Bottom;
        int iter          = 0;
        int iterMax       = 100;

        while ((residual > tol) && (iter < iterMax))
        {
            scalar coeff  = pow(totExpR, 1./(Nx-1.));
            scalar coeffN = pow(totExpR, Nx/(Nx-1.));

            scalar f      = (deltaStart*((1.-coeffN) / ((1.-coeff)))) - lEdge;
            scalar fPrime = deltaStart * Foam::log(totExpR) * (1./sqr(Nx-1.)) * ((1.-coeff)*coeffN - (1.-coeffN)*coeff)/ sqr(1.-coeff);
            Nx            = Nx - (f/fPrime);

            residual      = mag((deltaStart*((1.-coeffN) / ((1.-coeff)))) - lEdge);
            iter++;
        }
        os  << Nx << endl;
    #};
};
totExpZ3x    #calc "$dxOutlet/$dxFocus";
NxZ3         #calc "static_cast<int>( $NxCorrZ3 )";

rxOutletcorr #codeStream
{
    code
    #{
        scalar tol        = 1.0e-10;
        scalar residual   = 1.0e+10;
        scalar expRcorr   = $rxOutlet;
        scalar deltaStart = 1.00141417674807*($x2Top - $x1Top)/$NxFocus;
        scalar lEdge      = $xOutlet - $x2Top;
        int Nx            = $NxZ3;
        int iter          = 0;
        int iterMax       = 100;

        while ((residual > tol) && (iter < iterMax))
        {
            scalar f      = (deltaStart*((pow(expRcorr, Nx))-1)/(expRcorr-1)) - lEdge;
            scalar fPrime = deltaStart*((expRcorr-1)*Nx*(pow(expRcorr, (Nx-1)))-((pow(expRcorr, Nx))-1))/(sqr(expRcorr-1));
            expRcorr      = expRcorr - (f/fPrime);

            residual      = mag((deltaStart*(pow(expRcorr, Nx)-1)/(expRcorr-1)) - lEdge);
            iter++;
        }
        os  << expRcorr << endl;
    #};
};
totExpZ3xTop #calc "pow($rxOutletcorr, $NxZ3-1.0)";

// total number of cells in the x-direction
Nx           #calc "static_cast<int>( $NxZ1 + $NxFocus + $NxZ3 )";

// * * * * meshing / y-direction

// y-Zone 1 with grading
NyCorrZ1    #codeStream
{
    code
    #{
        scalar tol        = 1.0e-10;
        scalar residual   = 1.0e+10;
        scalar expRcorr   = $ryBL;
        scalar totExpR    = $dyFocus/$dyWall;
        scalar Nx         = Foam::log(totExpR)/Foam::log(expRcorr);
        scalar deltaStart = $dyWall;
        scalar lEdge      = $LyBL;
        int iter          = 0;
        int iterMax       = 100;

        while ((residual > tol) && (iter < iterMax))
        {
            scalar coeff  = pow(totExpR, 1./(Nx-1.));
            scalar coeffN = pow(totExpR, Nx/(Nx-1.));

            scalar f      = (deltaStart*((1.-coeffN) / ((1.-coeff)))) - lEdge;
            scalar fPrime = deltaStart * Foam::log(totExpR) * (1./sqr(Nx-1.)) * ((1.-coeff)*coeffN - (1.-coeffN)*coeff)/ sqr(1.-coeff);
            Nx            = Nx - (f/fPrime);

            residual      = mag((deltaStart*((1.-coeffN) / ((1.-coeff)))) - lEdge);
            iter++;
        }
        os  << Nx << endl;
    #};
};
totExpZ1y   #calc "$dyFocus/$dyWall";
NyZ1        #calc "static_cast<int>( $NyCorrZ1 )";

// y-Zone 2 with uniform spacing
NyZ2        #calc "static_cast<int>( $LyFocus/$dyFocus )";

// y-Zone 3 with grading
NyCorrZ3    #codeStream
{
    code
    #{
        scalar tol        = 1.0e-10;
        scalar residual   = 1.0e+10;
        scalar expRcorr   = $ryMid;
        scalar totExpR    = $dyMid/$dyFocus;
        scalar Nx         = Foam::log(totExpR)/Foam::log(expRcorr);
        scalar deltaStart = $dyFocus;
        scalar lEdge      = $LyMid;
        int iter          = 0;
        int iterMax       = 100;

        while ((residual > tol) && (iter < iterMax))
        {
            scalar coeff  = pow(totExpR, 1./(Nx-1.));
            scalar coeffN = pow(totExpR, Nx/(Nx-1.));

            scalar f      = (deltaStart*((1.-coeffN) / ((1.-coeff)))) - lEdge;
            scalar fPrime = deltaStart * Foam::log(totExpR) * (1./sqr(Nx-1.)) * ((1.-coeff)*coeffN - (1.-coeffN)*coeff)/ sqr(1.-coeff);
            Nx            = Nx - (f/fPrime);

            residual      = mag((deltaStart*((1.-coeffN) / ((1.-coeff)))) - lEdge);
            iter++;
        }
        os  << Nx << endl;
    #};
};
totExpZ3y   #calc "$dyMid/$dyFocus";
NyZ3        #calc "static_cast<int>( $NyCorrZ3 )";

// y-Zone 4 with grading
NyCorrZ4    #codeStream
{
    code
    #{
        scalar tol        = 1.0e-10;
        scalar residual   = 1.0e+10;
        scalar expRcorr   = $ryTop;
        scalar totExpR    = $dyMid/$dyTop;
        scalar Nx         = Foam::log(totExpR)/Foam::log(expRcorr);
        scalar deltaStart = $dyTop;
        scalar lEdge      = $yMax - $yMin - $LyMid - $LyFocus - $LyBL;
        int iter          = 0;
        int iterMax       = 100;

        while ((residual > tol) && (iter < iterMax))
        {
            scalar coeff  = pow(totExpR, 1./(Nx-1.));
            scalar coeffN = pow(totExpR, Nx/(Nx-1.));

            scalar f      = (deltaStart*((1.-coeffN) / ((1.-coeff)))) - lEdge;
            scalar fPrime = deltaStart * Foam::log(totExpR) * (1./sqr(Nx-1.)) * ((1.-coeff)*coeffN - (1.-coeffN)*coeff)/ sqr(1.-coeff);
            Nx            = Nx - (f/fPrime);

            residual      = mag((deltaStart*((1.-coeffN) / ((1.-coeff)))) - lEdge);
            iter++;
        }
        os  << Nx << endl;
    #};
};
totExpZ4y   #calc "$dyTop/$dyMid";
NyZ4        #calc "static_cast<int>( $NyCorrZ4 )";

// total number of cells in the y-direction
Ny          #calc "static_cast<int>( $NyZ1 + $NyZ2 + $NyZ3 + $NyZ4 )";

// * * * * meshing / z-direction

// total number of cells in the z-direction
Nz          #calc "static_cast<int>( ($zMax-$zMin)/$dz )";

// * * * * report additional grid statistics
#codeStream
{
    code
    #{
        Info  << endl;
        Info  << "Computed grid parameters:" << endl;
        Info  << "    > x-direction: " << endl;
        Info  << "      - Zone 1 (x): " << endl;
        Info  << "        - first spacing:                        dxInlet      = " << $dxInlet << " x c" << endl;
        Info  << "        - last spacing:                         dxFocus      = " << $dxFocus << " x c" << endl;
        Info  << "        - number of cells:                      NxZ1         = " << $NxZ1 << endl;
        Info  << "        - cell-to-cell ratio (prescribed):      rxInlet      = " << $rxInlet << endl;
        Info  << "        - first-to-last ratio (bottom):         totExpZ1x    = " << $totExpZ1x << endl;
        Info  << "        - first-to-last ratio (top):            totExpZ1xTop = " << $totExpZ1xTop << endl;
        Info  << "      - Zone 2 (x): " << endl;
        Info  << "        - first / last spacing:                 dxFocus      = " << $dxFocus << " x c" << endl;
        Info  << "        - number of cells:                      NxFocus      = " << $NxFocus << endl;
        Info  << "        - cell-to-cell ratio:                   rxFocus      = 1" << endl;
        Info  << "      - Zone 3 (x): " << endl;
        Info  << "        - first spacing:                        dxFocus      = " << $dxFocus << " x c" << endl;
        Info  << "        - last spacing:                         dxOutlet     = " << $dxOutlet << " x c" << endl;
        Info  << "        - number of cells:                      NxZ3         = " << $NxZ3 << endl;
        Info  << "        - cell-to-cell ratio (prescribed):      rxOutlet     = " << $rxOutlet << endl;
        Info  << "        - cell-to-cell ratio (corrected,top):   rxOutletcorr = " << $rxOutletcorr << endl;
        Info  << "        - first-to-last ratio (bottom):         totExpZ3x    = " << $totExpZ3x << endl;
        Info  << "        - first-to-last ratio (top):            totExpZ3xTop = " << $totExpZ3xTop << endl;
        Info  << "    - Total number of cells (x):              Nx           = " << $Nx << endl;
        Info  << endl;
        Info  << "    > y-directions: " << endl;
        Info  << "      - Zone 1 (y): " << endl;
        Info  << "        - length of edge:                       LyBL         = " << $LyBL << " x c" << endl;
        Info  << "        - first spacing:                        dyWall       = " << $dyWall << " x c" << endl;
        Info  << "        - last spacing:                         dyFocus      = " << $dyFocus << " x c" << endl;
        Info  << "        - number of cells:                      NyZ1         = " << $NyZ1 << endl;
        Info  << "        - cell-to-cell ratio (prescribed):      ryBL         = " << $ryBL << endl;
        Info  << "        - first-to-last ratio:                  totExpZ1y    = " << $totExpZ1y << endl;
        Info  << "      - Zone 2 (y): " << endl;
        Info  << "        - length of edge:                       LyFocus      = " << $LyFocus << " x c" << endl;
        Info  << "        - first / last spacing:                 dyFocus      = " << $dyFocus << " x c" << endl;
        Info  << "        - number of cells:                      NyZ2         = " << $NyZ2 << endl;
        Info  << "        - cell-to-cell ratio:                   ryFocus      = 1" << endl;
        Info  << "      - Zone 3 (y): " << endl;
        Info  << "        - length of edge:                       LyMid        = " << $LyMid << " x c" << endl;
        Info  << "        - first spacing:                        dyFocus      = " << $dyFocus << " x c" << endl;
        Info  << "        - last spacing:                         dyMid        = " << $dyMid << " x c" << endl;
        Info  << "        - number of cells:                      NyZ3         = " << $NyZ3 << endl;
        Info  << "        - cell-to-cell ratio (prescribed):      ryMid        = " << $ryMid << endl;
        Info  << "        - first-to-last ratio:                  totExpZ3y    = " << $totExpZ3y << endl;
        Info  << "      - Zone 4 (y): " << endl;
        Info  << "        - first spacing:                        dyMid        = " << $dyMid << " x c" << endl;
        Info  << "        - last spacing:                         dyTop        = " << $dyTop << " x c" << endl;
        Info  << "        - number of cells:                      NyZ4         = " << $NyZ4 << endl;
        Info  << "        - cell-to-cell ratio (prescribed):      ryTop        = " << $ryTop << endl;
        Info  << "        - first-to-last ratio:                  totExpZ4y    = " << $totExpZ4y << endl;
        Info  << "    - Total number of cells (y):              Ny           = " << $Ny << endl << endl;
    #};
};

vertices
(
    ( $xInlet    $yMin  $zMax )  // 0
    ( $xInlet    $yMin  $zMin )  // 1
    ( $xInlet    $yMax  $zMax )  // 2
    ( $xInlet    $yMax  $zMin )  // 3
    ( $x1Bottom  $yMin  $zMax )  // 4
    ( $x1Bottom  $yMin  $zMin )  // 5
    ( $x1Top     $yMax  $zMax )  // 6
    ( $x1Top     $yMax  $zMin )  // 7
    ( $x2Bottom  $yMin  $zMax )  // 8
    ( $x2Bottom  $yMin  $zMin )  // 9
    ( $x2Top     $yMax  $zMax )  // 10
    ( $x2Top     $yMax  $zMin )  // 11
    ( $xOutlet   $yMin  $zMax )  // 12
    ( $xOutlet   $yMin  $zMin )  // 13
    ( $xOutlet   $yMax  $zMax )  // 14
    ( $xOutlet   $yMax  $zMin )  // 15
);

zoneX1Bottom
(
    (1 1 $totExpZ1x)
);

zoneX1Top
(
    (1 1 $totExpZ1xTop)
);

zoneX3Bottom
(
    (1 1 $totExpZ3x)
);

zoneX3Top
(
    (1 1 $totExpZ3xTop)
);

zoneY
(
    ( $LyBL                                              $NyZ1 $totExpZ1y )
    ( $LyFocus                                           $NyZ2 1          )
    ( $LyMid                                             $NyZ3 $totExpZ3y )
    ( #eval{ $yMax - $yMin - $LyMid - $LyFocus - $LyBL } $NyZ4 $totExpZ4y )
);

blocks
(
    hex ( 1  5  7  3  0  4  6  2  ) ($NxZ1 $Ny $Nz) edgeGrading
    (
        $zoneX1Bottom
        $zoneX1Top
        $zoneX1Top
        $zoneX1Bottom
        $zoneY
        $zoneY
        $zoneY
        $zoneY
        1
        1
        1
        1
    )

    hex ( 5  9  11 7  4  8  10 6  ) ($NxFocus $Ny $Nz) simpleGrading
    (
        (
            (1 1 1)
        )
        $zoneY
        (
            (1 1 1)
        )
    )

    hex ( 9  13 15 11 8  12 14 10 ) ($NxZ3 $Ny $Nz) edgeGrading
    (
        $zoneX3Bottom
        $zoneX3Top
        $zoneX3Top
        $zoneX3Bottom
        $zoneY
        $zoneY
        $zoneY
        $zoneY
        1
        1
        1
        1
    )
);

edges
(
    // definition of poly lines for hump contour
    polyLine 4 8
    (
        #include "geometry/polyLine_4to8"
    )
    polyLine 5 9
    (
        #include "geometry/polyLine_5to9"
    )

    // definition of poly lines for contour of top wall
    polyLine 6 10
    (
        #include "geometry/polyLine_6to10"
    )
    polyLine 7 11
    (
        #include "geometry/polyLine_7to11"
    )
);

boundary
(
    inlet
    {
        type            patch;
        faces
        (
            (0 2 3 1)
        );
    }

    outlet
    {
        type            patch;
        faces
        (
            (12 13 15 14)
        );
    }

    topWall
    {
        type            wall;
        faces
        (
            ( 2  6  7  3  )
            ( 6  10 11 7  )
            ( 10 14 15 11 )
        );
    }

    bottomWall
    {
        type            wall;
        faces
        (
            ( 0  1  5  4  )
            ( 4  5  9  8  )
            ( 8  9  13 12 )
        );
    }

    zPeriodic_half0
    {
        type            cyclic;
        neighbourPatch  zPeriodic_half1;
        faces
        (
            ( 1  3  7  5  )
            ( 5  7  11 9  )
            ( 9  11 15 13 )
        );
    }

    zPeriodic_half1
    {
        type            cyclic;
        neighbourPatch  zPeriodic_half0;
        faces
        (
            ( 0  4  6  2  )
            ( 4  8  10 6  )
            ( 8  12 14 10 )
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
